// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.12;

import "../../src/osp/OneStepProverHostIo.sol";
import "forge-std/Test.sol";

import {BN254} from "eigenlayer-middleware/libraries/BN254.sol";

contract VerifyCommitentTest is Test {
    OneStepProverHostIo public osp;

    BN254.G1Point public commitment;
    BN254.G1Point public proof;

    uint256 public value;
    uint256 public evaluationPoint;

    // all commitments generated by eigenDA open commitment utils

    function setUp() public {
        osp = new OneStepProverHostIo();
    }

    uint256 internal constant G2TauMinusZCommitG2x0 =
        18661601381049519024519089189471291422853092365704516815915072048157194827561;
    uint256 internal constant G2TauMinusZCommitG2x1 =
        13438494147988583567753250571691619913302076853362981785635918286557069251073;
    uint256 internal constant G2TauMinusZCommitG2y0 =
        21334762444346340210567460488634776100469500639295693474545191705712497478514;
    uint256 internal constant G2TauMinusZCommitG2y1 =
        14745907799873989757051972255056064218237282162891110568940978756126201824118;

    function testVerifyCommitmentG2TauMinusZCommitG2()
        internal
        view
        returns (BN254.G2Point memory)
    {
        return BN254.G2Point({
            X: [G2TauMinusZCommitG2x1, G2TauMinusZCommitG2x0],
            Y: [G2TauMinusZCommitG2y1, G2TauMinusZCommitG2y0]
        });
    }

    function testVerifyCommitment() public {
        BN254.G2Point memory g2TauMinusZCommitG2 = testVerifyCommitmentG2TauMinusZCommitG2();
        commitment = BN254.G1Point(
            2961155957874067312593973807786254905069537311739090798303675273531563528369,
            159565752702690920280451512738307422982252330088949702406468210607852362941
        );
        proof = BN254.G1Point(
            3140275006105214616398887911734375818851847806994540943016311942563097259100,
            1901335408387077094777259997775410691226053037507541656866982737926032745825
        );
        value =
            207508779162842735480548510602597324319082308236775252882533101718680401000;
        evaluationPoint = 1;

        assertTrue(
            osp.verifyEigenDACommitment(
                commitment, proof, g2TauMinusZCommitG2, evaluationPoint, value
            )
        );
    }

    function testSanityPairing() public {
        // sanity pairing works
        BN254.G1Point memory g1Gen = BN254.generatorG1();
        BN254.G2Point memory g2Gen = BN254.generatorG2();

        BN254.G1Point memory g1GenNeg = BN254.negate(g1Gen);

        assertTrue(BN254.pairing(g1Gen, g2Gen, g1GenNeg, g2Gen));
    }

    function testVerifyIllegalCommitmentFails() public {
        commitment = BN254.G1Point(
            2961155957874067312593973807786254905069537311739090798303675273531563528369,
            159565752702690920280451512738307422982252330088949702406468210607852362941
        );
        proof = BN254.G1Point(
            20889584344688264775152566886162369109335964682277058078504426815999095925704,
            216054499853810563509078220646136944393866292849931571513515988346637933611
        );
        value =
            400194862503576342918173310331854693478403117005444701857659884415883371564;
        evaluationPoint = 10;

        //assertFalse(osp.verifyEigenDACommitment(commitment, proof, value, evaluationPoint));
    }

    function testDecodeAndVerifyProof() public {

        // hash = bytes32(0)
        // evaluation point = bytes32(1)
        // expected output = 207508779162842735480548510602597324319082308236775252882533101718680401000
        // g2TauMinusG2z = 13438494147988583567753250571691619913302076853362981785635918286557069251073186616013810495190245190891894712914228530923657045168159150720481571948275611474590779987398975705197225505606421823728216289111056894097875612620182411821334762444346340210567460488634776100469500639295693474545191705712497478514
        // kzgCommitment = 2961155957874067312593973807786254905069537311739090798303675273531563528369159565752702690920280451512738307422982252330088949702406468210607852362941
        // eigenDAKZGProof = 31402750061052146163988879117343758188518478069945409430163119425630972591001901335408387077094777259997775410691226053037507541656866982737926032745825
        bytes memory proofBytes = abi.encode(bytes32(uint256(0)), bytes32(uint256(1)), bytes32(uint256(207508779162842735480548510602597324319082308236775252882533101718680401000)), bytes32(uint256(13438494147988583567753250571691619913302076853362981785635918286557069251073)), bytes32(uint256(18661601381049519024519089189471291422853092365704516815915072048157194827561)), bytes32(uint256(14745907799873989757051972255056064218237282162891110568940978756126201824118)), bytes32(uint256(21334762444346340210567460488634776100469500639295693474545191705712497478514)), bytes32(uint256(2961155957874067312593973807786254905069537311739090798303675273531563528369)), bytes32(uint256(159565752702690920280451512738307422982252330088949702406468210607852362941)), bytes32(uint256(3140275006105214616398887911734375818851847806994540943016311942563097259100)), bytes32(uint256(1901335408387077094777259997775410691226053037507541656866982737926032745825)));


        assertTrue(this.decodeAndVerifyProof(proofBytes));
    }

    function decodeAndVerifyProof(bytes calldata kzgProof) public returns (bool) {

        // evaluation point
        uint256 evaluationPoint = uint256(bytes32(kzgProof[32:64]));

        // expected output
        uint256 expectedOutput = uint256(bytes32(kzgProof[64:96]));

        console.log("g2TauMinusG2z");

        BN254.G2Point memory g2TauMinusG2z = BN254.G2Point({
           X: [uint256(bytes32(kzgProof[96:128])), uint256(bytes32(kzgProof[128:160]))],
           Y: [uint256(bytes32(kzgProof[160:192])), uint256(bytes32(kzgProof[192:224]))]
        });

        assertTrue(g2TauMinusG2z.X[0] == testVerifyCommitmentG2TauMinusZCommitG2().X[0]);
        assertTrue(g2TauMinusG2z.Y[0] == testVerifyCommitmentG2TauMinusZCommitG2().Y[0]);
        assertTrue(g2TauMinusG2z.X[1] == testVerifyCommitmentG2TauMinusZCommitG2().X[1]);
        assertTrue(g2TauMinusG2z.Y[1] == testVerifyCommitmentG2TauMinusZCommitG2().Y[1]);

        BN254.G1Point memory kzgCommitment =
            BN254.G1Point(uint256(bytes32(kzgProof[224:256])), uint256(bytes32(kzgProof[256:288])));

        assertTrue(kzgCommitment.X == 2961155957874067312593973807786254905069537311739090798303675273531563528369);
        assertTrue(kzgCommitment.Y == 159565752702690920280451512738307422982252330088949702406468210607852362941);

        BN254.G1Point memory eigenDAKZGProof =
            BN254.G1Point(uint256(bytes32(kzgProof[288:320])), uint256(bytes32(kzgProof[320:352])));
        
        assertTrue(eigenDAKZGProof.X == 3140275006105214616398887911734375818851847806994540943016311942563097259100);
        assertTrue(eigenDAKZGProof.Y == 1901335408387077094777259997775410691226053037507541656866982737926032745825);

        return osp.verifyEigenDACommitment(kzgCommitment, eigenDAKZGProof, g2TauMinusG2z, evaluationPoint, expectedOutput);
    }
}
